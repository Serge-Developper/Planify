// API pour r√©initialiser le mot de passe
export default async function handler(req, res) {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', process.env.ALLOWED_ORIGINS || '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
  res.setHeader('Access-Control-Allow-Credentials', 'true');
  
  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }
  
  // Handle POST request to reset password
  if (req.method === 'POST') {
    try {
      console.log('üîç D√©but de la requ√™te forgot-password-reset');
      
      // Import dynamique des modules pour √©viter les probl√®mes Vercel
      const { MongoClient } = await import('mongodb');
      const bcryptjs = await import('bcryptjs');
      
      const { username, newPassword } = req.body;
      console.log('üìù Username re√ßu:', username);
      console.log('üìù Nouveau mot de passe re√ßu (longueur):', newPassword ? newPassword.length : 0);
      
      // Validate input
      if (!username || !newPassword) {
        console.log('‚ùå Donn√©es manquantes');
        return res.status(400).json({
          success: false,
          message: 'Nom d\'utilisateur et nouveau mot de passe requis'
        });
      }
      
      if (newPassword.length < 8) {
        console.log('‚ùå Mot de passe trop court');
        return res.status(400).json({
          success: false,
          message: 'Le mot de passe doit contenir au moins 8 caract√®res'
        });
      }
      
      // Check environment variables
      if (!process.env.MONGODB_URI) {
        console.error('‚ùå MONGODB_URI manquante');
        throw new Error('MONGODB_URI environment variable is not set');
      }
      
      console.log('üì° Connexion √† MongoDB...');
      const client = new MongoClient(process.env.MONGODB_URI);
      await client.connect();
      console.log('‚úÖ Connexion MongoDB r√©ussie');
      
      // Utiliser la base de donn√©es par d√©faut de l'URI
      const db = client.db();
      console.log('üìã Base de donn√©es utilis√©e:', db.databaseName);
      
      const usersCollection = db.collection('users');
      
      // Find user by username
      console.log('üîç Recherche utilisateur:', username);
      const user = await usersCollection.findOne({ username: username });
      
      if (!user) {
        console.log('‚ùå Utilisateur non trouv√©');
        await client.close();
        return res.status(404).json({
          success: false,
          message: 'Utilisateur non trouv√©'
        });
      }
      
      console.log('‚úÖ Utilisateur trouv√©:', user.username);
      
      // Hash the new password
      console.log('üîê Hashage du nouveau mot de passe...');
      const saltRounds = 12;
      const hashedPassword = await bcryptjs.default.hash(newPassword, saltRounds);
      
      // Update user's password
      console.log('üíæ Mise √† jour du mot de passe...');
      const result = await usersCollection.updateOne(
        { username: username },
        { $set: { password: hashedPassword } }
      );
      
      await client.close();
      console.log('üì° Connexion MongoDB ferm√©e');
      
      if (result.modifiedCount === 1) {
        console.log('‚úÖ Mot de passe mis √† jour avec succ√®s');
        res.status(200).json({
          success: true,
          message: 'Mot de passe mis √† jour avec succ√®s'
        });
      } else {
        console.log('‚ùå Erreur lors de la mise √† jour');
        res.status(500).json({
          success: false,
          message: 'Erreur lors de la mise √† jour du mot de passe'
        });
      }
      
    } catch (error) {
      console.error('‚ùå Erreur forgot-password-reset:', error);
      res.status(500).json({
        success: false,
        message: 'Erreur lors de la r√©initialisation du mot de passe',
        error: error.message
      });
    }
  } else {
    console.log('‚ùå M√©thode non autoris√©e:', req.method);
    res.status(405).json({
      success: false,
      message: 'M√©thode non autoris√©e'
    });
  }
}
